name: CI/CD Pipeline

on:
  push:
    branches: [ main, deploy, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install Meteor
      run: |
        curl https://install.meteor.com/ | sh
        export PATH="$HOME/.meteor:$PATH"
        
    - name: Cache Meteor packages
      uses: actions/cache@v3
      with:
        path: ~/.meteor
        key: meteor-${{ runner.os }}-${{ hashFiles('.meteor/versions') }}
        restore-keys: |
          meteor-${{ runner.os }}-
          
    - name: Install dependencies
      run: |
        export PATH="$HOME/.meteor:$PATH"
        meteor npm install
        
    - name: Check for security vulnerabilities
      run: |
        export PATH="$HOME/.meteor:$PATH"
        meteor npm audit --audit-level=high
        
    - name: Run security tests
      run: |
        export PATH="$HOME/.meteor:$PATH"
        # Test that security files are present
        test -f server/security.js || exit 1
        test -f SECURITY.md || exit 1
        test -f test-security.js || exit 1
        echo "‚úÖ Security files present"
        
    - name: Build application
      run: |
        export PATH="$HOME/.meteor:$PATH"
        meteor build --directory ../build --server-only
        
    - name: Test build artifacts
      run: |
        test -d ../build || exit 1
        test -f ../build/bundle/main.js || exit 1
        echo "‚úÖ Build successful"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install Meteor
      run: |
        curl https://install.meteor.com/ | sh
        export PATH="$HOME/.meteor:$PATH"
        
    - name: Install dependencies
      run: |
        export PATH="$HOME/.meteor:$PATH"
        meteor npm install
        
    - name: Check JavaScript syntax
      run: |
        # Check for basic syntax errors
        node -c refract.js
        node -c server/security.js
        node -c test-security.js
        echo "‚úÖ JavaScript syntax valid"
        
    - name: Check security configuration
      run: |
        # Verify security settings are present
        grep -q "rate.*limit" server/security.js || exit 1
        grep -q "Content-Security-Policy" server/security.js || exit 1
        grep -q "X-Frame-Options" server/security.js || exit 1
        echo "‚úÖ Security configuration verified"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, lint, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository_owner == 'eatyourpeas'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Railway configuration
      id: check-railway
      run: |
        if [ -z "${{ secrets.RAILWAY_TOKEN }}" ] || [ -z "${{ secrets.RAILWAY_PROJECT_ID }}" ]; then
          echo "‚ö†Ô∏è Railway not configured. Deployment will be skipped."
          echo "To enable auto-deployment:"
          echo "1. Set up Railway project"
          echo "2. Add RAILWAY_TOKEN to GitHub repository secrets"
          echo "3. Add RAILWAY_PROJECT_ID to GitHub repository secrets"
          echo "configured=false" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Railway configuration found"
          echo "configured=true" >> $GITHUB_OUTPUT
        fi
      
    - name: Deploy to Railway
      if: steps.check-railway.outputs.configured == 'true'
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      run: |
        set -e  # Exit on any error
        
        echo "üöÄ Starting deployment to Railway..."
        
        # Install Railway CLI
        npm install -g @railway/cli
        
        # Login to Railway
        echo "üîê Authenticating with Railway..."
        railway login --token $RAILWAY_TOKEN
        
        # Link to project
        echo "üîó Linking to Railway project..."
        railway link $RAILWAY_PROJECT_ID
        
        # Deploy the application
        echo "üì¶ Deploying application..."
        railway up --detach
        
        # Verify deployment
        echo "‚úÖ Deployment command completed successfully"
        
    - name: Notify deployment success
      if: success() && steps.check-railway.outputs.configured == 'true'
      run: |
        echo "üöÄ Deployment successful!"
        echo "Your app should be live at your Railway domain"
        echo "Check Railway dashboard for deployment status"
        
    - name: Notify deployment skipped
      if: steps.check-railway.outputs.configured == 'false'
      run: |
        echo "‚è≠Ô∏è Deployment skipped - Railway not configured"
        echo "This is not an error. Set up Railway secrets to enable deployment."
        
    - name: Notify deployment failure
      if: failure() && steps.check-railway.outputs.configured == 'true'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs above for error details"
        echo "Common issues:"
        echo "- Invalid Railway token or project ID"
        echo "- Network connectivity issues"
        echo "- Railway service unavailable"
        echo "- Project build or runtime errors"
        exit 1